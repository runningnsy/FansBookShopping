/*
 * 项目名称: UserShopping<br/>
 * 作者博客: <a href="http://user.qzone.qq.com/240370818/infocenter">雨田墨客</a><br/>
 * 作者邮箱: leiwen198962@qq.com<br/>
 * 版权所有: 2011-2012,leiwen<br/>
 */
package cn.fansunion.bookshopping.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import cn.fansunion.bookshopping.dao.UserDao;
import cn.fansunion.bookshopping.domain.User;
import cn.fansunion.bookshopping.domain.UserRole;
import cn.fansunion.bookshopping.exceptions.ServiceException;
import cn.fansunion.bookshopping.service.UserService;
import cn.fansunion.bookshopping.util.WebConstants;

/**
 * 业务逻辑层。处理和用户相关的业务，实现了UserService接口。
 * @author 雷文 2011-11-28
 * @since 1.0
 */
@Service
@Transactional(readOnly=true,propagation = Propagation.NOT_SUPPORTED)
public class UserServiceImpl implements UserService {

	private static final Logger LOG = Logger.getLogger(UserServiceImpl.class);

	@Resource
	private UserDao userDao;

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void add(User user) throws ServiceException {
		try {
			LOG.info("Try to add a user.");
			if (user != null) {
				UserRole userRole = user.getUserRole();
				if(userRole == null){
					UserRole ur = new UserRole();
					ur.setUserRoleId(1L);
					user.setUserRole(ur);
				}
				userDao.add(user);
				
			}
			LOG.info("Add user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Add user failed.");
			throw new ServiceException("Add user failed.");
		}
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void update(User user) throws ServiceException {
		try {
			LOG.info("Try to update a user.");

			User u = find(user.getUserId());
			u.setPassword(user.getPassword());
			u.setName(user.getName());
			u.setSex(user.isSex());
			// u.setUserRole(user.getUserRole());
			u.setMobile(user.getMobile());
			u.setEmail(user.getEmail());
			u.setAddress(user.getAddress());
			userDao.update(u);
			LOG.info("Update user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Update user failed.");
			throw new ServiceException("Update user failed.");
		}

	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void delete(User user) throws ServiceException {
		try {
			LOG.info("Try to delete a user.");
			delete(user.getUserId());
			LOG.info("Delete user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Delete user failed.");
			throw new ServiceException("Delete user failed.");
		}

	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void delete(Integer userId) throws ServiceException {
		try {
			LOG.info("Try to delete a user.");

			User user = userDao.find(userId);
			userDao.delete(user);
			LOG.info("Delete user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Delete user failed.");
			throw new ServiceException("Delete user failed.");
		}

	}

	@Override
	public User find(Integer userId) throws ServiceException {
		User user = null;
		try {
			LOG.info("Try to find a user.");
			user = userDao.find(userId);
			LOG.info("Find user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Find user failed.");
			throw new ServiceException("Find user failed.");
		}

		return user;
	}

	@Override
	public User find(String name) throws ServiceException {
		User user = null;
		try {
			LOG.info("Try to find a user.");
			List<User>users = userDao.find(name);
			if(users != null){
				user = users.get(0);
			}
			
			LOG.info("Find user successfully.");
		} catch (RuntimeException re) {
			LOG.info("Find user failed.");
			throw new ServiceException("Find user failed.");
		}

		return user;
	}
	
	@Override
	public List<User> findAll() throws ServiceException {
		List<User> users = null;
		try {
			LOG.info("Try to find all users.");
			users = userDao.findAll();
			LOG.info("Find all users successfully.");
		} catch (RuntimeException re) {
			LOG.info("Find all users failed.");
			throw new ServiceException("Find all users failed.");
		}

		return users;
	}

	@Override
	public List<User> findByPage(int pageIndex) throws ServiceException {
		List<User> users = null;
		try {
			LOG.info("Try to findByPage.");

			String sql = "select * from user";
			Class<?> clazz = User.class;
			int pageSize = WebConstants.USER_PAGE_SIZE;
			users = userDao.findByPage(sql, clazz, pageIndex, pageSize);

			String sqlCounter = "select count(*) from user";
			pageCounter = userDao.getPageCounter(sqlCounter);

			LOG.info("findByPage user successfully.");
		} catch (RuntimeException re) {
			LOG.info("findByPage user failed." + pageIndex, re);

			throw new ServiceException("findByPage user failed.");
		}

		return users;
	}

	@Override
	public List<User> findByPage(int pageIndex, long userCategoryId)
			throws ServiceException {
		List<User> users = null;
		try {
			LOG.info("Try to findByPage(int pageIndex, long userCategoryId).");
			String sql = "select * from user where user_role_id = ?";
			Class<?> clazz = User.class;
			int pageSize = WebConstants.USER_PAGE_SIZE;
			users = userDao.findByPage(sql, clazz, userCategoryId, pageIndex,
					pageSize);

			String sqlCounter = "select count(*) from user where user_role_id = ?";
			pageCounter = userDao.getPageCounter(sqlCounter, userCategoryId);

			LOG.info("findByPage(int pageIndex, long userCategoryId) successfully.");
		} catch (RuntimeException re) {
			LOG.info("findByPage(int pageIndex, long userCategoryId) failed."
					+ re);
			throw new ServiceException(
					"findByPage(int pageIndex, long userCategoryId) failed.",
					re);
		}

		return users;
	}

	private int pageCounter = 0;

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.leiwen.usershopping.service.UserService#getPageCounter()
	 */
	@Override
	public int getPageCounter() {
		return pageCounter;
	}
}
